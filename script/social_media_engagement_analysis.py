# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t1asRx6PNDuzn7KUc0JxVALQVIpF7H6S

# **Social Media Engagement Analysis**

# ***1. Import Libraries and Load Data***
"""

import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('/Viral_Social_Media_Trends.csv')
print(df.head())

"""# ***2. Basic Info and Cleanup***"""

print(df.info())           # Check columns & data types

print(df.isnull().sum())   # See missing values

# Fill or drop missing values if needed
df.dropna(inplace=True)
print(df.head())

# Convert numerical columns to int
df[['Views', 'Likes', 'Shares', 'Comments']] = df[['Views', 'Likes', 'Shares', 'Comments']].astype(int)
print(df.info())

"""# ***3. Calculate Engagement Rate***"""

df['Engagement_Rate'] = (df['Likes'] + df['Shares'] + df['Comments']) / df['Views']
df['Engagement_Rate'] = df['Engagement_Rate'].fillna(0)
print(df.Engagement_Rate.head())

"""# ***4. Top Performing Platforms***"""

Platform_Avg = df.groupby('Platform')['Engagement_Rate'].mean().sort_values(ascending=False)
df["Platform_Avg"]= Platform_Avg
print(df.Platform_Avg.head())

#represent this Platform_Avg on a graph


platform_avg.plot(kind='bar', color='magenta', title='Avg Engagement Rate by Platform')
plt.ylabel('Engagement Rate')
plt.tight_layout()
plt.show()

"""# ***5. Most Engaging Hashtags***"""

Top_Hashtags = df.groupby('Hashtag')['Engagement_Rate'].mean().sort_values(ascending=False).head(10)
df["Top_Hashtags"]= Top_Hashtags
print(df.Top_Hashtags.head())

#represent this Top_Hashtags on a graph


Top_Hashtags.plot(kind='bar', title='Top 10 Hashtags by Engagement Rate', color='orange')
plt.ylabel('Engagement Rate')
plt.tight_layout()
plt.show()

"""# ***6. Engagement by Content Type***"""

Content_Avg = df.groupby('Content_Type')['Engagement_Rate'].mean().sort_values(ascending=False)
df["Content_Avg"]=Content_Avg
print(df.Content_Avg.head())

#represent this Content_Avg on a graph


Content_Avg.plot(kind='bar', color='red', title='Engagement by Content Type')
plt.ylabel('Engagement Rate')
plt.tight_layout()
plt.show()

"""# ***7. Engagement by Region***"""

Region_Avg = df.groupby('Region')['Engagement_Rate'].mean().sort_values(ascending=False).head(10)
df["Region_Avg"]=Region_Avg
print(df.Region_Avg.head())

#represent this Region_Avg on a graph


Region_Avg.plot(kind='bar', color='purple', title='Top 10 Regions by Engagement')
plt.ylabel('Engagement Rate')
plt.tight_layout()
plt.show()

"""# ***8. Engagement Level Distribution***"""

#represent Engagement_Level this  on a graph


df['Engagement_Level'].value_counts().plot(kind='pie',autopct='%1.1f%%', title='Engagement Level Distribution')  #autopct is a parameter used in Matplotlibâ€™s pie chart function which shows percentage values on each slice.
plt.ylabel('')
plt.tight_layout()
plt.show()

"""# ***Summary Table***"""

summary = df.groupby('Platform')[['Views', 'Likes', 'Shares', 'Comments']].sum()
summary['Engagement Rate'] = (summary['Likes'] + summary['Shares'] + summary['Comments']) / summary['Views']
print(summary.sort_values(by='Engagement Rate', ascending=False))

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

data = {
    'Platform': ['Instagram', 'YouTube', 'Twitter', 'TikTok'],
    'Views': [2913744812, 3370438480, 3017229522, 3168919406],
    'Likes': [311627280, 342007739, 296039663, 307700467],
    'Shares': [60976822, 66296773, 60474212, 64850003],
    'Comments': [30249234, 33525521, 29446056, 31221158]
}

df = pd.DataFrame(data)

bar_width = 0.15
index = np.arange(len(df))

fig, ax = plt.subplots(figsize=(16, 8))

# Create bars for each metric
ax.bar(index - 1.5 * bar_width, df['Views'], width=bar_width, label='Views', color='#1f77b4')
ax.bar(index - 0.5 * bar_width, df['Likes'], width=bar_width, label='Likes', color='#ff7f0e')
ax.bar(index + 0.5 * bar_width, df['Shares'], width=bar_width, label='Shares', color='#2ca02c')
ax.bar(index + 1.5 * bar_width, df['Comments'], width=bar_width, label='Comments', color='#d62728')

# Set labels and title
ax.set_xlabel('Platform', fontsize=20, fontweight='bold')
ax.set_ylabel('Count', fontsize=20, fontweight='bold')
ax.set_xticks(index)
ax.set_xticklabels(df['Platform'], fontsize=18, fontweight='bold')
ax.tick_params(axis='y', labelsize=16)

# Add legend
ax.legend(loc='upper left', bbox_to_anchor=(1, 1), fontsize=14, title='Metrics', title_fontsize=16)

# Set title and grid
plt.title('Social Media Metrics Comparison by Platform', fontsize=24, fontweight='bold')
plt.grid(axis='y', linestyle='--', alpha=0.7)

# Show the plot
plt.tight_layout()  # Adjust layout to make room for the legend
plt.show()